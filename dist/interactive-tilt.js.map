{"version":3,"file":"interactive-tilt.js","names":["_utils","require","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","a","n","TypeError","_defineProperties","e","r","t","length","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","_defineProperty","value","i","_toPrimitive","toPrimitive","call","String","Number","winsize","calcWinsize","window","addEventListener","cursor","x","width","y","height","ev","getCursorPos","InteractiveTilt","exports","DOM_el","options","_this","el","wrapEl","perspective","valuesFromTo","rx","ry","rz","amt","DOM","querySelector","assign","defaults","style","concat","requestAnimationFrame","render","_this2","imgTransforms","lerp","map","transform"],"sources":["../public/javascripts/interactive-tilt.js"],"sourcesContent":["// Import utility functions from utils.js\nimport { calcWinsize, getCursorPos, lerp, map } from './utils.js';\nimport './emailJS.js';\n\n\n// Calculate the viewport size\nlet winsize = calcWinsize();\n// Add an event listener to re-calculate the viewport size when the window is resized\nwindow.addEventListener('resize', () => winsize = calcWinsize());\n\n// Initialize the cursor position to the center of the viewport\nlet cursor = {x: winsize.width/2, y: winsize.height/2};\n// Update the cursor position on mouse move\nwindow.addEventListener('mousemove', ev => cursor = getCursorPos(ev));\n\n// Export the InteractiveTilt class\nexport default class InteractiveTilt {\n    // Object to hold references to DOM elements\n    DOM = {\n        el: null, // Main element (.content)\n        wrapEl: null // Wrap element (.content__img-wrap)\n    };\n\n    // Default options for the InteractiveTilt effect\n    defaults = {\n        perspective: 800, // CSS perspective value for the 3D effect\n        // Range of values for translation and rotation on x and y axes\n        valuesFromTo: {\n            x: [-35, 35],\n            y: [-35, 35],\n            rx: [-18, 18], // rotation on the X-axis\n            ry: [-10, 10], // rotation on the Y-axis\n            rz: [-4, 4]   // rotation on the Z-axis\n        },\n        // Amount to interpolate values for smooth animation (higher value, less smoothing)\n        amt: 0.1\n    };\n\n    // Object to store the current transform values for the image element\n    imgTransforms = {x: 0, y: 0, rx: 0, ry: 0, rz: 0};\n\n    /**\n     * Constructor for the InteractiveTilt class.\n     * @param {Element} DOM_el - The .content element to be animated\n     * @param {Object} options - Custom options for the effect\n     */\n    constructor(DOM_el, options) {\n        // Assign DOM elements to the DOM object\n        this.DOM.el = DOM_el;\n        this.DOM.wrapEl = this.DOM.el.querySelector('.content__img-wrap');\n        // Merge the default options with any user-provided options\n        this.options = Object.assign(this.defaults, options);\n\n        // If a perspective value is provided, apply it to the main element\n        if (this.options.perspective) {\n            this.DOM.el.style.perspective = `${this.options.perspective}px`;\n        }\n\n        // Start the rendering loop for the animation\n        requestAnimationFrame(() => this.render());\n    }\n\n    /**\n     * Animation loop that applies the tilt effect based on the cursor position.\n     */\n    render() {\n        // Interpolate the current transform values towards the target values\n        // based on the cursor's position on the screen\n        this.imgTransforms.x = lerp(this.imgTransforms.x, map(cursor.x, 0, winsize.width, this.options.valuesFromTo.x[0], this.options.valuesFromTo.x[1]), this.options.amt);\n        this.imgTransforms.y = lerp(this.imgTransforms.y, map(cursor.y, 0, winsize.height, this.options.valuesFromTo.y[0], this.options.valuesFromTo.y[1]), this.options.amt);\n        this.imgTransforms.rz = lerp(this.imgTransforms.rz, map(cursor.x, 0, winsize.width, this.options.valuesFromTo.rz[0], this.options.valuesFromTo.rz[1]), this.options.amt);\n\n        // Apply rotation on the X and Y-axis only if perspective is enabled\n        this.imgTransforms.rx = !this.options.perspective ? 0 : lerp(this.imgTransforms.rx, map(cursor.y, 0, winsize.height, this.options.valuesFromTo.rx[0], this.options.valuesFromTo.rx[1]), this.options.amt);\n        this.imgTransforms.ry = !this.options.perspective ? 0 : lerp(this.imgTransforms.ry, map(cursor.x, 0, winsize.width, this.options.valuesFromTo.ry[0], this.options.valuesFromTo.ry[1]), this.options.amt);\n\n        // Apply the calculated transform values to the wrap element to create the 3D tilt effect\n        this.DOM.wrapEl.style.transform = `translateX(${this.imgTransforms.x}px) translateY(${this.imgTransforms.y}px) rotateX(${this.imgTransforms.rx}deg) rotateY(${this.imgTransforms.ry}deg) rotateZ(${this.imgTransforms.rz}deg)`;\n\n        // Continue the loop with the next animation frame\n        requestAnimationFrame(() => this.render());\n    }\n}"],"mappings":"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","ignoreList":[]}